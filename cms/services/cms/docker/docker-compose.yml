version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cms_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cms_db}
      POSTGRES_USER: ${POSTGRES_USER:-cms_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cms_password}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-md5}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - cms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cms_user} -d ${POSTGRES_DB:-cms_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: cms_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - cms_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # CMS FastAPI Application
  cms_app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: cms_app
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-cms_user}:${POSTGRES_PASSWORD:-cms_password}@postgres:5432/${POSTGRES_DB:-cms_db}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-cms_db}
      POSTGRES_USER: ${POSTGRES_USER:-cms_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cms_password}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      
      # Application Configuration
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      API_V1_STR: "/api/v1"
      PROJECT_NAME: "CMS API"
      PROJECT_VERSION: "1.0.0"
      
      # Security Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # CORS Configuration
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      
      # File Upload Configuration
      UPLOAD_DIR: /app/media
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}  # 10MB
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: /app/logs/cms.log
      
      # Category Configuration
      MAX_CATEGORY_DEPTH: ${MAX_CATEGORY_DEPTH:-5}
      DEFAULT_CATEGORY_LANGUAGE: ${DEFAULT_CATEGORY_LANGUAGE:-ar}
      
      # Email Configuration (for development)
      SMTP_HOST: ${SMTP_HOST:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      EMAILS_FROM_EMAIL: ${EMAILS_FROM_EMAIL:-noreply@cms.local}
      
    volumes:
      - ../app:/app/app:delegated  # Mount source code for development
      - ../tests:/app/tests:delegated
      - ../alembic:/app/alembic:delegated
      - ../pyproject.toml:/app/pyproject.toml:ro
      - ../poetry.lock:/app/poetry.lock:ro
      - media_data:/app/media
      - logs_data:/app/logs
    ports:
      - "${CMS_PORT:-8000}:8000"
    networks:
      - cms_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ../app
          target: /app/app
        - action: rebuild
          path: ../pyproject.toml
        - action: rebuild
          path: ../poetry.lock

  # MailHog for email testing in development
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: cms_mailhog
    ports:
      - "${MAILHOG_WEB_PORT:-8025}:8025"  # Web interface
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP server
    networks:
      - cms_network
    restart: unless-stopped

  # Adminer for database management
  adminer:
    image: adminer:4-standalone
    container_name: cms_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - cms_network
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cms_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis_password}
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - cms_network
    depends_on:
      - redis
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_data:
    driver: local
  logs_data:
    driver: local

# Networks
networks:
  cms_network:
    driver: bridge
    name: cms_network