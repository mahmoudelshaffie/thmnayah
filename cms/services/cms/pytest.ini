[tool:pytest]
# Pytest configuration file for CMS category management tests

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Minimum version requirement
minversion = 6.0

# Add current directory to Python path
addopts = 
    -ra
    --strict-markers
    --strict-config
    --disable-warnings
    --tb=short
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    -p no:cacheprovider

# Test markers
markers =
    integration: Integration tests that test the full API endpoints
    unit: Unit tests that test individual functions/classes
    slow: Tests that take longer to run (>1 second)
    performance: Performance and load tests
    auth: Tests that require authentication
    multilingual: Tests that verify multilingual functionality
    hierarchy: Tests that verify hierarchical category structure
    validation: Tests that verify input validation
    database: Tests that require database connection
    api: Tests that test API endpoints
    
# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::RuntimeWarning:passlib.*
    
# Test timeout (in seconds) - prevents hanging tests
timeout = 60
timeout_method = thread

# Async test configuration
asyncio_mode = auto

# Test output formatting  
console_output_style = progress
junit_family = xunit2

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging for test runs
log_file = tests/test_run.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = app
omit = 
    app/main.py
    app/db/migration/*
    app/test*
    tests/*
    */venv/*
    */virtualenv/*
    */.venv/*
    */migrations/*
    */alembic/*
    
[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    
show_missing = true
precision = 2
skip_covered = false
sort = Cover

[coverage:html]
directory = htmlcov
title = CMS Category Management Test Coverage

[coverage:xml]
output = coverage.xml